{
    "appid": "ff116964-86f7-4e29-8763-4462ce0d39a7",
    "name": "Git",
    "description": "This app integrates with git and supports common git actions",
    "publisher": "Splunk",
    "package_name": "phantom_git",
    "license": "Copyright (c) 2017-2022 Splunk Inc.",
    "main_module": "git_connector.py",
    "type": "devops",
    "app_version": "2.0.9",
    "utctime_updated": "2022-01-07T22:42:09.000000Z",
    "product_vendor": "Generic",
    "product_name": "Git",
    "product_version_regex": ".*",
    "min_phantom_version": "5.1.0",
    "fips_compliant": true,
    "python_version": "3",
    "logo": "logo_git.svg",
    "logo_dark": "logo_git_dark.svg",
    "latest_tested_versions": [
        "on-prem, version 1.8.3.1"
    ],
    "configuration": {
        "repo_uri": {
            "description": "Repo URI",
            "data_type": "string",
            "required": true,
            "order": 0
        },
        "branch_name": {
            "description": "Branch Name (Default: master)",
            "data_type": "string",
            "required": true,
            "default": "master",
            "order": 1
        },
        "username": {
            "description": "Username",
            "data_type": "string",
            "order": 2
        },
        "password": {
            "description": "Password",
            "data_type": "password",
            "order": 3
        },
        "repo_name": {
            "description": "Repo Name",
            "data_type": "string",
            "order": 4
        }
    },
    "actions": [
        {
            "action": "test connectivity",
            "description": "Validate credentials provided for connectivity",
            "type": "test",
            "identifier": "test_asset_connectivity",
            "read_only": true,
            "parameters": {},
            "output": [],
            "versions": "EQ(*)"
        },
        {
            "action": "configure ssh",
            "description": "Create an RSA Key pair for SSH connectivity",
            "verbose": "This action will generate a new RSA key pair to enable connecting via SSH. It will return the public key, which you should add to the repo that you wish to connect to.",
            "type": "generic",
            "identifier": "configure_ssh",
            "read_only": false,
            "parameters": {
                "force_new": {
                    "description": "Force create a new key pair",
                    "data_type": "boolean",
                    "order": 0
                }
            },
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Configure SSH"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.parameter.force_new",
                    "data_type": "boolean",
                    "example_values": [
                        "True",
                        "False"
                    ]
                },
                {
                    "data_path": "action_result.data",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.summary.rsa_pub_key",
                    "data_type": "string",
                    "example_values": [
                        "ssh-rsa <key>"
                    ],
                    "column_name": "rsa_pub_key",
                    "column_order": 0
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Rsa pub key"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "list repos",
            "description": "List repos configured/pulled",
            "type": "investigate",
            "identifier": "list_repos",
            "read_only": true,
            "parameters": {},
            "render": {
                "width": 12,
                "height": 5,
                "type": "custom",
                "title": "List Repos",
                "view": "git_view.display_action_details"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_dirs",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repos",
                    "data_type": "string",
                    "example_values": [
                        "test_repo"
                    ]
                },
                {
                    "data_path": "action_result.summary.total_repos",
                    "data_type": "numeric",
                    "example_values": [
                        2
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Total repos: 2"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "update file",
            "description": "Update (overwrite) contents of a file in the working directory",
            "verbose": "This action will overwrite the contents of the existing file with the specified input in the local working directory.<br>If <b>vault_id</b> is specified the contents are overwritten from the file in the vault, else from the data in the <b>contents</b> parameter. The <b>contents</b> parameter can only contain textual data.",
            "type": "generic",
            "identifier": "update_file",
            "read_only": false,
            "parameters": {
                "file_path": {
                    "description": "File path in repo to update",
                    "data_type": "string",
                    "required": true,
                    "order": 0,
                    "primary": true,
                    "contains": [
                        "file path"
                    ]
                },
                "contents": {
                    "description": "Contents (text) of the file",
                    "data_type": "string",
                    "order": 1
                },
                "vault_id": {
                    "description": "Vault ID",
                    "data_type": "string",
                    "order": 2,
                    "primary": true,
                    "contains": [
                        "vault id"
                    ]
                }
            },
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Update File"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_order": 4,
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.contents",
                    "data_type": "string",
                    "example_values": [
                        "Contents to write in the file"
                    ],
                    "column_order": 3,
                    "column_name": "Contents"
                },
                {
                    "data_path": "action_result.parameter.file_path",
                    "data_type": "string",
                    "example_values": [
                        "b"
                    ],
                    "contains": [
                        "file path"
                    ],
                    "column_order": 1,
                    "column_name": "File Path"
                },
                {
                    "data_path": "action_result.parameter.vault_id",
                    "data_type": "string",
                    "example_values": [
                        "75881c96a30cd1f07d596059388368836b6b1b74"
                    ],
                    "contains": [
                        "vault id"
                    ],
                    "column_order": 2,
                    "column_name": "Vault ID"
                },
                {
                    "data_path": "action_result.data.*.file_path",
                    "data_type": "string",
                    "example_values": [
                        "b"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_name",
                    "data_type": "string",
                    "example_values": [
                        "repo2"
                    ],
                    "column_order": 0,
                    "column_name": "Repo Name"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "File file1 updated successfully"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "git status",
            "description": "Get the result of git status",
            "type": "investigate",
            "identifier": "git_status",
            "read_only": true,
            "parameters": {},
            "render": {
                "width": 12,
                "height": 5,
                "type": "custom",
                "title": "Git Status",
                "view": "git_view.display_git_status"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.staged.deleted",
                    "data_type": "string",
                    "example_values": [
                        "deleted_file"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.data.*.staged.modified",
                    "data_type": "string",
                    "example_values": [
                        "modified_file"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.data.*.staged.new_file",
                    "data_type": "string",
                    "example_values": [
                        "new_file"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.data.*.staged.renamed",
                    "data_type": "string",
                    "example_values": [
                        "old_file -> new_file"
                    ]
                },
                {
                    "data_path": "action_result.data.*.str",
                    "data_type": "string",
                    "example_values": [
                        "On branch master\nYour branch is up-to-date with 'origin/master'.\nnothing to commit, working directory clean"
                    ]
                },
                {
                    "data_path": "action_result.data.*.unstaged.modified",
                    "data_type": "string",
                    "example_values": [
                        "modified_file"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.data.*.untracked_files",
                    "data_type": "string",
                    "example_values": [
                        "untracked_file"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.summary.status",
                    "data_type": "string",
                    "example_values": [
                        "Your branch is up-to-date with 'origin/master'."
                    ]
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Status: Your branch is up-to-date with 'origin/master'."
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "delete file",
            "description": "Delete a file from the local working directory",
            "type": "generic",
            "identifier": "delete_file",
            "read_only": false,
            "parameters": {
                "file_path": {
                    "description": "File path in repo to delete",
                    "data_type": "string",
                    "required": true,
                    "order": 0,
                    "primary": true,
                    "contains": [
                        "file path"
                    ]
                }
            },
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Delete File"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_order": 2,
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.file_path",
                    "data_type": "string",
                    "example_values": [
                        "n1"
                    ],
                    "contains": [
                        "file path"
                    ],
                    "column_order": 1,
                    "column_name": "File Path"
                },
                {
                    "data_path": "action_result.data.*.file_path",
                    "data_type": "string",
                    "example_values": [
                        "n1"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_name",
                    "data_type": "string",
                    "example_values": [
                        "repo2"
                    ],
                    "column_order": 0,
                    "column_name": "Repo Name"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "File file1 deleted successfully"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "add file",
            "description": "Create a file in the local working directory",
            "verbose": "This action will create in the working directory a file with the specified input data.<br>If <b>vault_id</b> is specified the contents are picked from the file in the vault, else from the data in the <b>contents</b> parameter. The <b>contents</b> parameter can only contain textual data.",
            "type": "generic",
            "identifier": "add_file",
            "read_only": false,
            "parameters": {
                "file_path": {
                    "description": "File path in repo to add",
                    "data_type": "string",
                    "required": true,
                    "order": 0,
                    "contains": [
                        "file path"
                    ],
                    "primary": true
                },
                "contents": {
                    "description": "Contents (text) of the file",
                    "data_type": "string",
                    "order": 1
                },
                "vault_id": {
                    "description": "Vault ID",
                    "data_type": "string",
                    "primary": true,
                    "order": 2,
                    "contains": [
                        "vault id"
                    ]
                }
            },
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Add File"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_order": 4,
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.contents",
                    "data_type": "string",
                    "example_values": [
                        "new content"
                    ],
                    "column_order": 3,
                    "column_name": "Contents"
                },
                {
                    "data_path": "action_result.parameter.file_path",
                    "data_type": "string",
                    "example_values": [
                        "n1"
                    ],
                    "contains": [
                        "file path"
                    ],
                    "column_order": 1,
                    "column_name": "File Path"
                },
                {
                    "data_path": "action_result.parameter.vault_id",
                    "data_type": "string",
                    "example_values": [
                        "75881c96a30cd1f07d596059388368836b6b1b74"
                    ],
                    "contains": [
                        "vault id"
                    ],
                    "column_order": 2,
                    "column_name": "Vault ID"
                },
                {
                    "data_path": "action_result.data.*.file_path",
                    "data_type": "string",
                    "example_values": [
                        "n1"
                    ],
                    "contains": [
                        "file path"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_name",
                    "data_type": "string",
                    "example_values": [
                        "repo2"
                    ],
                    "column_order": 0,
                    "column_name": "Repo Name"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "File file1 added successfully"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "git commit",
            "description": "Commit changes",
            "type": "generic",
            "identifier": "git_commit",
            "read_only": false,
            "parameters": {
                "message": {
                    "description": "Commit message (Default: committed from phantom)",
                    "data_type": "string",
                    "required": true,
                    "default": "committed from phantom",
                    "order": 0
                },
                "push": {
                    "description": "Push to remote after commit",
                    "data_type": "boolean",
                    "order": 1
                }
            },
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Git Commit"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_order": 3,
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.parameter.message",
                    "data_type": "string",
                    "example_values": [
                        "committed from phantom"
                    ],
                    "column_order": 2,
                    "column_name": "Commit Message"
                },
                {
                    "data_path": "action_result.parameter.push",
                    "data_type": "boolean",
                    "example_values": [
                        true,
                        false
                    ]
                },
                {
                    "data_path": "action_result.data.*.branch_name",
                    "data_type": "string",
                    "example_values": [
                        "master"
                    ],
                    "column_order": 1,
                    "column_name": "Branch Name"
                },
                {
                    "data_path": "action_result.data.*.commit_message",
                    "data_type": "string",
                    "example_values": [
                        "committed from phantom"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_name",
                    "data_type": "string",
                    "example_values": [
                        "repo2"
                    ],
                    "column_order": 0,
                    "column_name": "Repo Name"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Commit to repo test_repo completed successfully"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "git push",
            "description": "Push commits to the remote server",
            "type": "generic",
            "identifier": "git_push",
            "read_only": false,
            "parameters": {},
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Git Push"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_order": 2,
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.data.*.branch_name",
                    "data_type": "string",
                    "example_values": [
                        "master"
                    ],
                    "column_order": 1,
                    "column_name": "Branch Name"
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_name",
                    "data_type": "string",
                    "example_values": [
                        "repo2"
                    ],
                    "column_order": 0,
                    "column_name": "Repo Name"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Repo test_repo pushed successfully"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "git pull",
            "description": "Pull the repo",
            "type": "investigate",
            "identifier": "git_pull",
            "read_only": true,
            "parameters": {},
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Git Pull"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ],
                    "column_order": 2,
                    "column_name": "Status"
                },
                {
                    "data_path": "action_result.data.*.branch_name",
                    "data_type": "string",
                    "example_values": [
                        "master"
                    ],
                    "column_order": 1,
                    "column_name": "Branch Name"
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_name",
                    "data_type": "string",
                    "example_values": [
                        "repo2"
                    ],
                    "column_order": 0,
                    "column_name": "Repo Name"
                },
                {
                    "data_path": "action_result.data.*.response",
                    "data_type": "string",
                    "example_values": [
                        "Already up-to-date."
                    ]
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Repo test_repo pulled successfully"
                    ]
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        },
        {
            "action": "delete repo",
            "description": "Delete a cloned repository",
            "type": "generic",
            "identifier": "delete_clone",
            "read_only": false,
            "parameters": {},
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Successfully deleted repository"
                    ],
                    "column_name": "Message",
                    "column_order": 0
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "render": {
                "width": 12,
                "title": "Delete Repo",
                "type": "table",
                "height": 5
            },
            "versions": "EQ(*)"
        },
        {
            "action": "clone repo",
            "description": "Clone the repo",
            "type": "generic",
            "identifier": "clone_repo",
            "read_only": true,
            "parameters": {},
            "render": {
                "width": 12,
                "height": 5,
                "type": "table",
                "title": "Clone Repo"
            },
            "output": [
                {
                    "data_path": "action_result.status",
                    "data_type": "string",
                    "example_values": [
                        "success",
                        "failed"
                    ]
                },
                {
                    "data_path": "action_result.data.*.branch_name",
                    "data_type": "string",
                    "example_values": [
                        "master"
                    ],
                    "column_order": 1,
                    "column_name": "Branch Name"
                },
                {
                    "data_path": "action_result.data.*.repo_dir",
                    "data_type": "string",
                    "example_values": [
                        "/opt/phantom/local_data/app_states/ff116964-86f7-4e29-8763-4462ce0d39a7/test_repo"
                    ]
                },
                {
                    "data_path": "action_result.data.*.repo_name",
                    "data_type": "string",
                    "example_values": [
                        "repo2"
                    ],
                    "column_order": 0,
                    "column_name": "Repo Name"
                },
                {
                    "data_path": "action_result.summary",
                    "data_type": "string"
                },
                {
                    "data_path": "action_result.message",
                    "data_type": "string",
                    "example_values": [
                        "Repo test_repo cloned successfully"
                    ],
                    "column_order": 2,
                    "column_name": "Message"
                },
                {
                    "data_path": "summary.total_objects",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                },
                {
                    "data_path": "summary.total_objects_successful",
                    "data_type": "numeric",
                    "example_values": [
                        1
                    ]
                }
            ],
            "versions": "EQ(*)"
        }
    ],
    "pip_dependencies": {
        "wheel": [
            {
                "module": "GitPython",
                "input_file": "wheels/py3/GitPython-3.1.7-py3-none-any.whl"
            },
            {
                "module": "gitdb",
                "input_file": "wheels/py3/gitdb-4.0.9-py3-none-any.whl"
            },
            {
                "module": "pycryptodomex",
                "input_file": "wheels/py36/pycryptodomex-3.9.8-cp36-cp36m-manylinux1_x86_64.manylinux_2_5_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
            },
            {
                "module": "smmap",
                "input_file": "wheels/py3/smmap-5.0.0-py3-none-any.whl"
            }
        ]
    },
    "pip39_dependencies": {
        "wheel": [
            {
                "module": "GitPython",
                "input_file": "wheels/py3/GitPython-3.1.7-py3-none-any.whl"
            },
            {
                "module": "gitdb",
                "input_file": "wheels/py3/gitdb-4.0.9-py3-none-any.whl"
            },
            {
                "module": "pycryptodomex",
                "input_file": "wheels/py39/pycryptodomex-3.9.8-cp39-cp39-manylinux1_x86_64.manylinux_2_5_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl"
            },
            {
                "module": "smmap",
                "input_file": "wheels/py3/smmap-5.0.0-py3-none-any.whl"
            }
        ]
    }
}
